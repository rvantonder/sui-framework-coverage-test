// Move bytecode v6
module 2.dynamic_field {
use 0000000000000000000000000000000000000002::object;


struct Field<Name: copy + drop + store, Value: store> has key {
	id: UID,
	name: Name,
	value: Value
}

public add<Name: copy + drop + store, Value: store>(object: &mut UID, name: Name, value: Value) {
B0:
	0: MoveLoc[0](object: &mut UID)
	1: FreezeRef
	2: Call object::uid_to_address(&UID): address
	3: StLoc[5](object_addr: address)
	4: CopyLoc[5](object_addr: address)
	5: CopyLoc[1](name: Name)
	6: Call hash_type_and_key<Name>(address, Name): address
	7: StLoc[4](hash: address)
	8: CopyLoc[5](object_addr: address)
	9: CopyLoc[4](hash: address)
	10: Call has_child_object(address, address): bool
	11: Not
	12: BrFalse(14)
B1:
	13: Branch(16)
B2:
	14: LdConst[1](U64: [0, 0, 0, 0, 0, 0, 0, 0])
	15: Abort
B3:
	16: MoveLoc[4](hash: address)
	17: Call object::new_uid_from_hash(address): UID
	18: MoveLoc[1](name: Name)
	19: MoveLoc[2](value: Value)
	20: PackGeneric[0](Field<Name, Value>)
	21: StLoc[3](field: Field<Name, Value>)
	22: MoveLoc[5](object_addr: address)
	23: MoveLoc[3](field: Field<Name, Value>)
	24: Call add_child_object<Field<Name, Value>>(address, Field<Name, Value>)
	25: Ret
}
native public(friend) add_child_object<Child: key>(parent: address, child: Child)
public borrow<Name: copy + drop + store, Value: store>(object: &UID, name: Name): &Value {
B0:
	0: CopyLoc[0](object: &UID)
	1: Call object::uid_to_address(&UID): address
	2: MoveLoc[1](name: Name)
	3: Call hash_type_and_key<Name>(address, Name): address
	4: StLoc[2](hash: address)
	5: MoveLoc[0](object: &UID)
	6: MoveLoc[2](hash: address)
	7: Call borrow_child_object<Field<Name, Value>>(&UID, address): &Field<Name, Value>
	8: ImmBorrowFieldGeneric[0](Field.value: Value)
	9: Ret
}
native public(friend) borrow_child_object<Child: key>(object: &UID, id: address): &Child
native public(friend) borrow_child_object_mut<Child: key>(object: &mut UID, id: address): &mut Child
public borrow_mut<Name: copy + drop + store, Value: store>(object: &mut UID, name: Name): &mut Value {
B0:
	0: CopyLoc[0](object: &mut UID)
	1: FreezeRef
	2: Call object::uid_to_address(&UID): address
	3: MoveLoc[1](name: Name)
	4: Call hash_type_and_key<Name>(address, Name): address
	5: StLoc[2](hash: address)
	6: MoveLoc[0](object: &mut UID)
	7: MoveLoc[2](hash: address)
	8: Call borrow_child_object_mut<Field<Name, Value>>(&mut UID, address): &mut Field<Name, Value>
	9: MutBorrowFieldGeneric[0](Field.value: Value)
	10: Ret
}
public exists_<Name: copy + drop + store>(object: &UID, name: Name): bool {
B0:
	0: MoveLoc[0](object: &UID)
	1: Call object::uid_to_address(&UID): address
	2: StLoc[3](object_addr: address)
	3: CopyLoc[3](object_addr: address)
	4: MoveLoc[1](name: Name)
	5: Call hash_type_and_key<Name>(address, Name): address
	6: StLoc[2](hash: address)
	7: MoveLoc[3](object_addr: address)
	8: MoveLoc[2](hash: address)
	9: Call has_child_object(address, address): bool
	10: Ret
}
public exists_with_type<Name: copy + drop + store, Value: store>(object: &UID, name: Name): bool {
B0:
	0: MoveLoc[0](object: &UID)
	1: Call object::uid_to_address(&UID): address
	2: StLoc[3](object_addr: address)
	3: CopyLoc[3](object_addr: address)
	4: MoveLoc[1](name: Name)
	5: Call hash_type_and_key<Name>(address, Name): address
	6: StLoc[2](hash: address)
	7: MoveLoc[3](object_addr: address)
	8: MoveLoc[2](hash: address)
	9: Call has_child_object_with_ty<Field<Name, Value>>(address, address): bool
	10: Ret
}
public(friend) field_info<Name: copy + drop + store>(object: &UID, name: Name): &UID * address {
L0:	id: &UID
L1:	value: &ID
B0:
	0: CopyLoc[0](object: &UID)
	1: Call object::uid_to_address(&UID): address
	2: MoveLoc[1](name: Name)
	3: Call hash_type_and_key<Name>(address, Name): address
	4: StLoc[3](hash: address)
	5: MoveLoc[0](object: &UID)
	6: MoveLoc[3](hash: address)
	7: Call borrow_child_object<Field<Name, ID>>(&UID, address): &Field<Name, ID>
	8: StLoc[2](%#1: &Field<Name, ID>)
	9: CopyLoc[2](%#1: &Field<Name, ID>)
	10: ImmBorrowFieldGeneric[1](Field.id: UID)
	11: StLoc[4](id: &UID)
	12: CopyLoc[2](%#1: &Field<Name, ID>)
	13: ImmBorrowFieldGeneric[2](Field.name: Name)
	14: Pop
	15: MoveLoc[2](%#1: &Field<Name, ID>)
	16: ImmBorrowFieldGeneric[3](Field.value: Value)
	17: StLoc[5](value: &ID)
	18: MoveLoc[4](id: &UID)
	19: MoveLoc[5](value: &ID)
	20: Call object::id_to_address(&ID): address
	21: Ret
}
public(friend) field_info_mut<Name: copy + drop + store>(object: &mut UID, name: Name): &mut UID * address {
L0:	id: &mut UID
L1:	value: &mut ID
B0:
	0: CopyLoc[0](object: &mut UID)
	1: FreezeRef
	2: Call object::uid_to_address(&UID): address
	3: MoveLoc[1](name: Name)
	4: Call hash_type_and_key<Name>(address, Name): address
	5: StLoc[3](hash: address)
	6: MoveLoc[0](object: &mut UID)
	7: MoveLoc[3](hash: address)
	8: Call borrow_child_object_mut<Field<Name, ID>>(&mut UID, address): &mut Field<Name, ID>
	9: StLoc[2](%#1: &mut Field<Name, ID>)
	10: CopyLoc[2](%#1: &mut Field<Name, ID>)
	11: MutBorrowFieldGeneric[1](Field.id: UID)
	12: StLoc[4](id: &mut UID)
	13: CopyLoc[2](%#1: &mut Field<Name, ID>)
	14: MutBorrowFieldGeneric[2](Field.name: Name)
	15: Pop
	16: MoveLoc[2](%#1: &mut Field<Name, ID>)
	17: MutBorrowFieldGeneric[3](Field.value: Value)
	18: StLoc[5](value: &mut ID)
	19: MoveLoc[4](id: &mut UID)
	20: MoveLoc[5](value: &mut ID)
	21: FreezeRef
	22: Call object::id_to_address(&ID): address
	23: Ret
}
native public(friend) has_child_object(parent: address, id: address): bool
native public(friend) has_child_object_with_ty<Child: key>(parent: address, id: address): bool
native public(friend) hash_type_and_key<K: copy + drop + store>(parent: address, k: K): address
public remove<Name: copy + drop + store, Value: store>(object: &mut UID, name: Name): Value {
L0:	value: Value
B0:
	0: MoveLoc[0](object: &mut UID)
	1: FreezeRef
	2: Call object::uid_to_address(&UID): address
	3: StLoc[3](object_addr: address)
	4: CopyLoc[3](object_addr: address)
	5: MoveLoc[1](name: Name)
	6: Call hash_type_and_key<Name>(address, Name): address
	7: StLoc[2](hash: address)
	8: MoveLoc[3](object_addr: address)
	9: MoveLoc[2](hash: address)
	10: Call remove_child_object<Field<Name, Value>>(address, address): Field<Name, Value>
	11: UnpackGeneric[0](Field<Name, Value>)
	12: StLoc[4](value: Value)
	13: Pop
	14: Call object::delete(UID)
	15: MoveLoc[4](value: Value)
	16: Ret
}
native public(friend) remove_child_object<Child: key>(parent: address, id: address): Child
}
