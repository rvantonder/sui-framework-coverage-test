// Move bytecode v6
module 2.object {
use 0000000000000000000000000000000000000001::bcs;
use 0000000000000000000000000000000000000002::address;
use 0000000000000000000000000000000000000002::tx_context;


struct ID has copy, drop, store {
	bytes: address
}
struct UID has store {
	id: ID
}

public borrow_id<T: key>(obj: &T): &ID {
B0:
	0: MoveLoc[0](obj: &T)
	1: Call borrow_uid<T>(&T): &UID
	2: ImmBorrowField[0](UID.id: ID)
	3: Ret
}
native borrow_uid<T: key>(obj: &T): &UID
public delete(id: UID) {
B0:
	0: MoveLoc[0](id: UID)
	1: Unpack[1](UID)
	2: Unpack[0](ID)
	3: Call delete_impl(address)
	4: Ret
}
native delete_impl(id: address)
public id<T: key>(obj: &T): ID {
B0:
	0: MoveLoc[0](obj: &T)
	1: Call borrow_uid<T>(&T): &UID
	2: ImmBorrowField[0](UID.id: ID)
	3: ReadRef
	4: Ret
}
public id_address<T: key>(obj: &T): address {
B0:
	0: MoveLoc[0](obj: &T)
	1: Call borrow_uid<T>(&T): &UID
	2: ImmBorrowField[0](UID.id: ID)
	3: ImmBorrowField[1](ID.bytes: address)
	4: ReadRef
	5: Ret
}
public id_bytes<T: key>(obj: &T): vector<u8> {
B0:
	0: MoveLoc[0](obj: &T)
	1: Call borrow_uid<T>(&T): &UID
	2: ImmBorrowField[0](UID.id: ID)
	3: Call bcs::to_bytes<ID>(&ID): vector<u8>
	4: Ret
}
public id_from_address(bytes: address): ID {
B0:
	0: MoveLoc[0](bytes: address)
	1: Pack[0](ID)
	2: Ret
}
public id_from_bytes(bytes: vector<u8>): ID {
B0:
	0: MoveLoc[0](bytes: vector<u8>)
	1: Call address::from_bytes(vector<u8>): address
	2: Call id_from_address(address): ID
	3: Ret
}
public id_to_address(id: &ID): address {
B0:
	0: MoveLoc[0](id: &ID)
	1: ImmBorrowField[1](ID.bytes: address)
	2: ReadRef
	3: Ret
}
public id_to_bytes(id: &ID): vector<u8> {
B0:
	0: MoveLoc[0](id: &ID)
	1: ImmBorrowField[1](ID.bytes: address)
	2: Call bcs::to_bytes<address>(&address): vector<u8>
	3: Ret
}
public new(ctx: &mut TxContext): UID {
B0:
	0: MoveLoc[0](ctx: &mut TxContext)
	1: Call tx_context::new_object(&mut TxContext): address
	2: Pack[0](ID)
	3: Pack[1](UID)
	4: Ret
}
public(friend) new_uid_from_hash(bytes: address): UID {
B0:
	0: CopyLoc[0](bytes: address)
	1: Call record_new_uid(address)
	2: MoveLoc[0](bytes: address)
	3: Pack[0](ID)
	4: Pack[1](UID)
	5: Ret
}
native record_new_uid(id: address)
public(friend) sui_system_state(): UID {
B0:
	0: LdConst[0](Address: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5])
	1: Pack[0](ID)
	2: Pack[1](UID)
	3: Ret
}
public uid_as_inner(uid: &UID): &ID {
B0:
	0: MoveLoc[0](uid: &UID)
	1: ImmBorrowField[0](UID.id: ID)
	2: Ret
}
public uid_to_address(uid: &UID): address {
B0:
	0: MoveLoc[0](uid: &UID)
	1: ImmBorrowField[0](UID.id: ID)
	2: ImmBorrowField[1](ID.bytes: address)
	3: ReadRef
	4: Ret
}
public uid_to_bytes(uid: &UID): vector<u8> {
B0:
	0: MoveLoc[0](uid: &UID)
	1: ImmBorrowField[0](UID.id: ID)
	2: ImmBorrowField[1](ID.bytes: address)
	3: Call bcs::to_bytes<address>(&address): vector<u8>
	4: Ret
}
public uid_to_inner(uid: &UID): ID {
B0:
	0: MoveLoc[0](uid: &UID)
	1: ImmBorrowField[0](UID.id: ID)
	2: ReadRef
	3: Ret
}
}
