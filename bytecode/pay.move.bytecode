// Move bytecode v6
module 2.pay {
use 0000000000000000000000000000000000000002::coin;
use 0000000000000000000000000000000000000002::transfer;
use 0000000000000000000000000000000000000002::tx_context;




entry public divide_and_keep<T>(self: &mut Coin<T>, n: u64, ctx: &mut TxContext) {
B0:
	0: MoveLoc[0](self: &mut Coin<T>)
	1: MoveLoc[1](n: u64)
	2: CopyLoc[2](ctx: &mut TxContext)
	3: Call coin::divide_into_n<T>(&mut Coin<T>, u64, &mut TxContext): vector<Coin<T>>
	4: StLoc[5](vec: vector<Coin<T>>)
	5: LdU64(0)
	6: ImmBorrowLoc[5](vec: vector<Coin<T>>)
	7: VecLen(11)
	8: StLoc[4](len: u64)
	9: StLoc[3](i: u64)
B1:
	10: CopyLoc[3](i: u64)
	11: CopyLoc[4](len: u64)
	12: Lt
	13: BrFalse(26)
B2:
	14: Branch(15)
B3:
	15: MutBorrowLoc[5](vec: vector<Coin<T>>)
	16: VecPopBack(11)
	17: CopyLoc[2](ctx: &mut TxContext)
	18: FreezeRef
	19: Call tx_context::sender(&TxContext): address
	20: Call transfer::transfer<Coin<T>>(Coin<T>, address)
	21: MoveLoc[3](i: u64)
	22: LdU64(1)
	23: Add
	24: StLoc[3](i: u64)
	25: Branch(10)
B4:
	26: MoveLoc[2](ctx: &mut TxContext)
	27: Pop
	28: MoveLoc[5](vec: vector<Coin<T>>)
	29: VecUnpack(11, 0)
	30: Ret
}
entry public join<T>(self: &mut Coin<T>, coin: Coin<T>) {
B0:
	0: MoveLoc[0](self: &mut Coin<T>)
	1: MoveLoc[1](coin: Coin<T>)
	2: Call coin::join<T>(&mut Coin<T>, Coin<T>)
	3: Ret
}
entry public join_vec<T>(self: &mut Coin<T>, coins: vector<Coin<T>>) {
L0:	len: u64
B0:
	0: LdU64(0)
	1: ImmBorrowLoc[1](coins: vector<Coin<T>>)
	2: VecLen(11)
	3: StLoc[4](len: u64)
	4: StLoc[3](i: u64)
B1:
	5: CopyLoc[3](i: u64)
	6: CopyLoc[4](len: u64)
	7: Lt
	8: BrFalse(21)
B2:
	9: Branch(10)
B3:
	10: MutBorrowLoc[1](coins: vector<Coin<T>>)
	11: VecPopBack(11)
	12: StLoc[2](coin: Coin<T>)
	13: CopyLoc[0](self: &mut Coin<T>)
	14: MoveLoc[2](coin: Coin<T>)
	15: Call coin::join<T>(&mut Coin<T>, Coin<T>)
	16: MoveLoc[3](i: u64)
	17: LdU64(1)
	18: Add
	19: StLoc[3](i: u64)
	20: Branch(5)
B4:
	21: MoveLoc[0](self: &mut Coin<T>)
	22: Pop
	23: MoveLoc[1](coins: vector<Coin<T>>)
	24: VecUnpack(11, 0)
	25: Ret
}
entry public join_vec_and_transfer<T>(coins: vector<Coin<T>>, receiver: address) {
B0:
	0: ImmBorrowLoc[0](coins: vector<Coin<T>>)
	1: VecLen(11)
	2: LdU64(0)
	3: Gt
	4: BrFalse(6)
B1:
	5: Branch(8)
B2:
	6: LdConst[0](U64: [0, 0, 0, 0, 0, 0, 0, 0])
	7: Abort
B3:
	8: MutBorrowLoc[0](coins: vector<Coin<T>>)
	9: VecPopBack(11)
	10: StLoc[2](self: Coin<T>)
	11: MutBorrowLoc[2](self: Coin<T>)
	12: MoveLoc[0](coins: vector<Coin<T>>)
	13: Call join_vec<T>(&mut Coin<T>, vector<Coin<T>>)
	14: MoveLoc[2](self: Coin<T>)
	15: MoveLoc[1](receiver: address)
	16: Call transfer::transfer<Coin<T>>(Coin<T>, address)
	17: Ret
}
public keep<T>(c: Coin<T>, ctx: &TxContext) {
B0:
	0: MoveLoc[0](c: Coin<T>)
	1: MoveLoc[1](ctx: &TxContext)
	2: Call tx_context::sender(&TxContext): address
	3: Call transfer::transfer<Coin<T>>(Coin<T>, address)
	4: Ret
}
entry public split<T>(self: &mut Coin<T>, split_amount: u64, ctx: &mut TxContext) {
B0:
	0: MoveLoc[0](self: &mut Coin<T>)
	1: MoveLoc[1](split_amount: u64)
	2: CopyLoc[2](ctx: &mut TxContext)
	3: Call coin::split<T>(&mut Coin<T>, u64, &mut TxContext): Coin<T>
	4: MoveLoc[2](ctx: &mut TxContext)
	5: FreezeRef
	6: Call keep<T>(Coin<T>, &TxContext)
	7: Ret
}
entry public split_and_transfer<T>(c: &mut Coin<T>, amount: u64, recipient: address, ctx: &mut TxContext) {
B0:
	0: MoveLoc[0](c: &mut Coin<T>)
	1: MoveLoc[1](amount: u64)
	2: MoveLoc[3](ctx: &mut TxContext)
	3: Call coin::split<T>(&mut Coin<T>, u64, &mut TxContext): Coin<T>
	4: MoveLoc[2](recipient: address)
	5: Call transfer::transfer<Coin<T>>(Coin<T>, address)
	6: Ret
}
entry public split_vec<T>(self: &mut Coin<T>, split_amounts: vector<u64>, ctx: &mut TxContext) {
B0:
	0: LdU64(0)
	1: ImmBorrowLoc[1](split_amounts: vector<u64>)
	2: VecLen(17)
	3: StLoc[4](len: u64)
	4: StLoc[3](i: u64)
B1:
	5: CopyLoc[3](i: u64)
	6: CopyLoc[4](len: u64)
	7: Lt
	8: BrFalse(22)
B2:
	9: Branch(10)
B3:
	10: CopyLoc[0](self: &mut Coin<T>)
	11: ImmBorrowLoc[1](split_amounts: vector<u64>)
	12: CopyLoc[3](i: u64)
	13: VecImmBorrow(17)
	14: ReadRef
	15: CopyLoc[2](ctx: &mut TxContext)
	16: Call split<T>(&mut Coin<T>, u64, &mut TxContext)
	17: MoveLoc[3](i: u64)
	18: LdU64(1)
	19: Add
	20: StLoc[3](i: u64)
	21: Branch(5)
B4:
	22: MoveLoc[0](self: &mut Coin<T>)
	23: Pop
	24: MoveLoc[2](ctx: &mut TxContext)
	25: Pop
	26: Ret
}
}
