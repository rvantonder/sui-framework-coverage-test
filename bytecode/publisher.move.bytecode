// Move bytecode v6
module 2.publisher {
use 0000000000000000000000000000000000000001::ascii;
use 0000000000000000000000000000000000000001::type_name;
use 0000000000000000000000000000000000000002::object;
use 0000000000000000000000000000000000000002::transfer;
use 0000000000000000000000000000000000000002::tx_context;
use 0000000000000000000000000000000000000002::types;


struct Publisher has store, key {
	id: UID,
	package: String,
	module_name: String
}

public burn(self: Publisher) {
B0:
	0: MoveLoc[0](self: Publisher)
	1: Unpack[0](Publisher)
	2: Pop
	3: Pop
	4: Call object::delete(UID)
	5: Ret
}
public claim<OTW: drop>(otw: OTW, ctx: &mut TxContext): Publisher {
B0:
	0: ImmBorrowLoc[0](otw: OTW)
	1: Call types::is_one_time_witness<OTW>(&OTW): bool
	2: BrFalse(4)
B1:
	3: Branch(8)
B2:
	4: MoveLoc[1](ctx: &mut TxContext)
	5: Pop
	6: LdConst[0](U64: [0, 0, 0, 0, 0, 0, 0, 0])
	7: Abort
B3:
	8: Call type_name::get<OTW>(): TypeName
	9: StLoc[2](type: TypeName)
	10: MoveLoc[1](ctx: &mut TxContext)
	11: Call object::new(&mut TxContext): UID
	12: ImmBorrowLoc[2](type: TypeName)
	13: Call type_name::get_address(&TypeName): String
	14: ImmBorrowLoc[2](type: TypeName)
	15: Call type_name::get_module(&TypeName): String
	16: Pack[0](Publisher)
	17: Ret
}
public claim_and_keep<OTW: drop>(otw: OTW, ctx: &mut TxContext) {
B0:
	0: MoveLoc[0](otw: OTW)
	1: CopyLoc[1](ctx: &mut TxContext)
	2: Call claim<OTW>(OTW, &mut TxContext): Publisher
	3: MoveLoc[1](ctx: &mut TxContext)
	4: FreezeRef
	5: Call tx_context::sender(&TxContext): address
	6: Call transfer::transfer<Publisher>(Publisher, address)
	7: Ret
}
public is_module<T>(self: &Publisher): bool {
L0:	type: TypeName
B0:
	0: Call type_name::get<T>(): TypeName
	1: StLoc[2](type: TypeName)
	2: ImmBorrowLoc[2](type: TypeName)
	3: Call type_name::get_address(&TypeName): String
	4: CopyLoc[0](self: &Publisher)
	5: ImmBorrowField[0](Publisher.package: String)
	6: ReadRef
	7: Eq
	8: BrFalse(17)
B1:
	9: ImmBorrowLoc[2](type: TypeName)
	10: Call type_name::get_module(&TypeName): String
	11: MoveLoc[0](self: &Publisher)
	12: ImmBorrowField[1](Publisher.module_name: String)
	13: ReadRef
	14: Eq
	15: StLoc[1](%#1: bool)
	16: Branch(21)
B2:
	17: MoveLoc[0](self: &Publisher)
	18: Pop
	19: LdFalse
	20: StLoc[1](%#1: bool)
B3:
	21: MoveLoc[1](%#1: bool)
	22: Ret
}
public is_package<T>(self: &Publisher): bool {
B0:
	0: Call type_name::get<T>(): TypeName
	1: StLoc[1](type: TypeName)
	2: ImmBorrowLoc[1](type: TypeName)
	3: Call type_name::get_address(&TypeName): String
	4: MoveLoc[0](self: &Publisher)
	5: ImmBorrowField[0](Publisher.package: String)
	6: ReadRef
	7: Eq
	8: Ret
}
public module_name(self: &Publisher): &String {
B0:
	0: MoveLoc[0](self: &Publisher)
	1: ImmBorrowField[1](Publisher.module_name: String)
	2: Ret
}
public package(self: &Publisher): &String {
B0:
	0: MoveLoc[0](self: &Publisher)
	1: ImmBorrowField[0](Publisher.package: String)
	2: Ret
}
}
