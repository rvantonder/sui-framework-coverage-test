// Move bytecode v6
module 2.validator {
use 0000000000000000000000000000000000000001::ascii;
use 0000000000000000000000000000000000000001::bcs;
use 0000000000000000000000000000000000000001::option;
use 0000000000000000000000000000000000000001::string;
use 0000000000000000000000000000000000000001::vector;
use 0000000000000000000000000000000000000002::balance;
use 0000000000000000000000000000000000000002::bls12381;
use 0000000000000000000000000000000000000002::epoch_time_lock;
use 0000000000000000000000000000000000000002::stake;
use 0000000000000000000000000000000000000002::staking_pool;
use 0000000000000000000000000000000000000002::sui;
use 0000000000000000000000000000000000000002::tx_context;
use 0000000000000000000000000000000000000002::url;


struct ValidatorMetadata has copy, drop, store {
	sui_address: address,
	pubkey_bytes: vector<u8>,
	network_pubkey_bytes: vector<u8>,
	worker_pubkey_bytes: vector<u8>,
	proof_of_possession: vector<u8>,
	name: String,
	description: String,
	image_url: Url,
	project_url: Url,
	net_address: vector<u8>,
	consensus_address: vector<u8>,
	worker_address: vector<u8>,
	next_epoch_stake: u64,
	next_epoch_delegation: u64,
	next_epoch_gas_price: u64,
	next_epoch_commission_rate: u64
}
struct Validator has store {
	metadata: ValidatorMetadata,
	voting_power: u64,
	stake_amount: u64,
	pending_stake: u64,
	pending_withdraw: u64,
	gas_price: u64,
	delegation_staking_pool: StakingPool,
	commission_rate: u64
}

verify_proof_of_possession(proof_of_possession#0#0: vector<u8>, sui_address#0#0: address, pubkey_bytes#0#0: vector<u8>) {
B0:
	0: CopyLoc[2](pubkey_bytes#0#0: vector<u8>)
	1: StLoc[4](signed_bytes#1#0: vector<u8>)
	2: ImmBorrowLoc[1](sui_address#0#0: address)
	3: Call bcs::to_bytes<address>(&address): vector<u8>
	4: StLoc[3](address_bytes#1#0: vector<u8>)
	5: MutBorrowLoc[4](signed_bytes#1#0: vector<u8>)
	6: MoveLoc[3](address_bytes#1#0: vector<u8>)
	7: Call vector::append<u8>(&mut vector<u8>, vector<u8>)
	8: ImmBorrowLoc[0](proof_of_possession#0#0: vector<u8>)
	9: ImmBorrowLoc[2](pubkey_bytes#0#0: vector<u8>)
	10: MoveLoc[4](signed_bytes#1#0: vector<u8>)
	11: LdConst[0](Vector(U8): [4, 107, 111, 115, 107])
	12: Call bls12381::bls12381_min_sig_verify_with_domain(&vector<u8>, &vector<u8>, vector<u8>, vector<u8>): bool
	13: LdTrue
	14: Eq
	15: BrFalse(17)
B1:
	16: Branch(19)
B2:
	17: LdU64(0)
	18: Abort
B3:
	19: Ret
}
public(friend) new(sui_address#0#0: address, pubkey_bytes#0#0: vector<u8>, network_pubkey_bytes#0#0: vector<u8>, worker_pubkey_bytes#0#0: vector<u8>, proof_of_possession#0#0: vector<u8>, name#0#0: vector<u8>, description#0#0: vector<u8>, image_url#0#0: vector<u8>, project_url#0#0: vector<u8>, net_address#0#0: vector<u8>, consensus_address#0#0: vector<u8>, worker_address#0#0: vector<u8>, stake#0#0: Balance<SUI>, coin_locked_until_epoch#0#0: Option<EpochTimeLock>, gas_price#0#0: u64, commission_rate#0#0: u64, ctx#0#0: &mut TxContext): Validator {
B0:
	0: ImmBorrowLoc[9](net_address#0#0: vector<u8>)
	1: VecLen(25)
	2: LdU64(128)
	3: Le
	4: BrFalse(11)
B1:
	5: ImmBorrowLoc[5](name#0#0: vector<u8>)
	6: VecLen(25)
	7: LdU64(128)
	8: Le
	9: StLoc[17](%#1: bool)
	10: Branch(13)
B2:
	11: LdFalse
	12: StLoc[17](%#1: bool)
B3:
	13: MoveLoc[17](%#1: bool)
	14: BrFalse(21)
B4:
	15: ImmBorrowLoc[6](description#0#0: vector<u8>)
	16: VecLen(25)
	17: LdU64(150)
	18: Le
	19: StLoc[18](%#2: bool)
	20: Branch(23)
B5:
	21: LdFalse
	22: StLoc[18](%#2: bool)
B6:
	23: MoveLoc[18](%#2: bool)
	24: BrFalse(31)
B7:
	25: ImmBorrowLoc[1](pubkey_bytes#0#0: vector<u8>)
	26: VecLen(25)
	27: LdU64(128)
	28: Le
	29: StLoc[19](%#3: bool)
	30: Branch(33)
B8:
	31: LdFalse
	32: StLoc[19](%#3: bool)
B9:
	33: MoveLoc[19](%#3: bool)
	34: BrFalse(36)
B10:
	35: Branch(40)
B11:
	36: MoveLoc[16](ctx#0#0: &mut TxContext)
	37: Pop
	38: LdU64(0)
	39: Abort
B12:
	40: CopyLoc[4](proof_of_possession#0#0: vector<u8>)
	41: CopyLoc[0](sui_address#0#0: address)
	42: CopyLoc[1](pubkey_bytes#0#0: vector<u8>)
	43: Call verify_proof_of_possession(vector<u8>, address, vector<u8>)
	44: ImmBorrowLoc[12](stake#0#0: Balance<SUI>)
	45: Call balance::value<SUI>(&Balance<SUI>): u64
	46: StLoc[20](stake_amount#1#0: u64)
	47: MoveLoc[12](stake#0#0: Balance<SUI>)
	48: CopyLoc[0](sui_address#0#0: address)
	49: MoveLoc[13](coin_locked_until_epoch#0#0: Option<EpochTimeLock>)
	50: CopyLoc[16](ctx#0#0: &mut TxContext)
	51: Call stake::create(Balance<SUI>, address, Option<EpochTimeLock>, &mut TxContext)
	52: CopyLoc[0](sui_address#0#0: address)
	53: MoveLoc[1](pubkey_bytes#0#0: vector<u8>)
	54: MoveLoc[2](network_pubkey_bytes#0#0: vector<u8>)
	55: MoveLoc[3](worker_pubkey_bytes#0#0: vector<u8>)
	56: MoveLoc[4](proof_of_possession#0#0: vector<u8>)
	57: MoveLoc[5](name#0#0: vector<u8>)
	58: Call ascii::string(vector<u8>): String
	59: Call string::from_ascii(String): String
	60: MoveLoc[6](description#0#0: vector<u8>)
	61: Call ascii::string(vector<u8>): String
	62: Call string::from_ascii(String): String
	63: MoveLoc[7](image_url#0#0: vector<u8>)
	64: Call url::new_unsafe_from_bytes(vector<u8>): Url
	65: MoveLoc[8](project_url#0#0: vector<u8>)
	66: Call url::new_unsafe_from_bytes(vector<u8>): Url
	67: MoveLoc[9](net_address#0#0: vector<u8>)
	68: MoveLoc[10](consensus_address#0#0: vector<u8>)
	69: MoveLoc[11](worker_address#0#0: vector<u8>)
	70: CopyLoc[20](stake_amount#1#0: u64)
	71: LdU64(0)
	72: CopyLoc[14](gas_price#0#0: u64)
	73: CopyLoc[15](commission_rate#0#0: u64)
	74: Pack[0](ValidatorMetadata)
	75: CopyLoc[20](stake_amount#1#0: u64)
	76: MoveLoc[20](stake_amount#1#0: u64)
	77: LdU64(0)
	78: LdU64(0)
	79: MoveLoc[14](gas_price#0#0: u64)
	80: MoveLoc[0](sui_address#0#0: address)
	81: CopyLoc[16](ctx#0#0: &mut TxContext)
	82: FreezeRef
	83: Call tx_context::epoch(&TxContext): u64
	84: LdU64(1)
	85: Add
	86: MoveLoc[16](ctx#0#0: &mut TxContext)
	87: Call staking_pool::new(address, u64, &mut TxContext): StakingPool
	88: MoveLoc[15](commission_rate#0#0: u64)
	89: Pack[1](Validator)
	90: Ret
}
public(friend) destroy(self#0#0: Validator, ctx#0#0: &mut TxContext) {
B0:
	0: MoveLoc[0](self#0#0: Validator)
	1: Unpack[1](Validator)
	2: Pop
	3: StLoc[2](delegation_staking_pool#1#0: StakingPool)
	4: Pop
	5: Pop
	6: Pop
	7: Pop
	8: Pop
	9: Pop
	10: MoveLoc[2](delegation_staking_pool#1#0: StakingPool)
	11: MoveLoc[1](ctx#0#0: &mut TxContext)
	12: Call staking_pool::deactivate_staking_pool(StakingPool, &mut TxContext)
	13: Ret
}
public(friend) request_add_stake(self#0#0: &mut Validator, new_stake#0#0: Balance<SUI>, coin_locked_until_epoch#0#0: Option<EpochTimeLock>, ctx#0#0: &mut TxContext) {
B0:
	0: ImmBorrowLoc[1](new_stake#0#0: Balance<SUI>)
	1: Call balance::value<SUI>(&Balance<SUI>): u64
	2: StLoc[4](new_stake_value#1#0: u64)
	3: CopyLoc[0](self#0#0: &mut Validator)
	4: ImmBorrowField[0](Validator.pending_stake: u64)
	5: ReadRef
	6: CopyLoc[4](new_stake_value#1#0: u64)
	7: Add
	8: CopyLoc[0](self#0#0: &mut Validator)
	9: MutBorrowField[0](Validator.pending_stake: u64)
	10: WriteRef
	11: CopyLoc[0](self#0#0: &mut Validator)
	12: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	13: ImmBorrowField[2](ValidatorMetadata.next_epoch_stake: u64)
	14: ReadRef
	15: MoveLoc[4](new_stake_value#1#0: u64)
	16: Add
	17: CopyLoc[0](self#0#0: &mut Validator)
	18: MutBorrowField[1](Validator.metadata: ValidatorMetadata)
	19: MutBorrowField[2](ValidatorMetadata.next_epoch_stake: u64)
	20: WriteRef
	21: MoveLoc[1](new_stake#0#0: Balance<SUI>)
	22: MoveLoc[0](self#0#0: &mut Validator)
	23: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	24: ImmBorrowField[3](ValidatorMetadata.sui_address: address)
	25: ReadRef
	26: MoveLoc[2](coin_locked_until_epoch#0#0: Option<EpochTimeLock>)
	27: MoveLoc[3](ctx#0#0: &mut TxContext)
	28: Call stake::create(Balance<SUI>, address, Option<EpochTimeLock>, &mut TxContext)
	29: Ret
}
public(friend) request_withdraw_stake(self#0#0: &mut Validator, stake#0#0: &mut Stake, withdraw_amount#0#0: u64, min_validator_stake#0#0: u64, ctx#0#0: &mut TxContext) {
B0:
	0: CopyLoc[0](self#0#0: &mut Validator)
	1: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	2: ImmBorrowField[2](ValidatorMetadata.next_epoch_stake: u64)
	3: ReadRef
	4: CopyLoc[2](withdraw_amount#0#0: u64)
	5: MoveLoc[3](min_validator_stake#0#0: u64)
	6: Add
	7: Ge
	8: BrFalse(10)
B1:
	9: Branch(18)
B2:
	10: MoveLoc[1](stake#0#0: &mut Stake)
	11: Pop
	12: MoveLoc[0](self#0#0: &mut Validator)
	13: Pop
	14: MoveLoc[4](ctx#0#0: &mut TxContext)
	15: Pop
	16: LdU64(0)
	17: Abort
B3:
	18: CopyLoc[0](self#0#0: &mut Validator)
	19: ImmBorrowField[4](Validator.pending_withdraw: u64)
	20: ReadRef
	21: CopyLoc[2](withdraw_amount#0#0: u64)
	22: Add
	23: CopyLoc[0](self#0#0: &mut Validator)
	24: MutBorrowField[4](Validator.pending_withdraw: u64)
	25: WriteRef
	26: CopyLoc[0](self#0#0: &mut Validator)
	27: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	28: ImmBorrowField[2](ValidatorMetadata.next_epoch_stake: u64)
	29: ReadRef
	30: CopyLoc[2](withdraw_amount#0#0: u64)
	31: Sub
	32: MoveLoc[0](self#0#0: &mut Validator)
	33: MutBorrowField[1](Validator.metadata: ValidatorMetadata)
	34: MutBorrowField[2](ValidatorMetadata.next_epoch_stake: u64)
	35: WriteRef
	36: MoveLoc[1](stake#0#0: &mut Stake)
	37: MoveLoc[2](withdraw_amount#0#0: u64)
	38: MoveLoc[4](ctx#0#0: &mut TxContext)
	39: Call stake::withdraw_stake(&mut Stake, u64, &mut TxContext)
	40: Ret
}
public(friend) adjust_stake_and_gas_price(self#0#0: &mut Validator) {
B0:
	0: CopyLoc[0](self#0#0: &mut Validator)
	1: ImmBorrowField[5](Validator.stake_amount: u64)
	2: ReadRef
	3: CopyLoc[0](self#0#0: &mut Validator)
	4: ImmBorrowField[0](Validator.pending_stake: u64)
	5: ReadRef
	6: Add
	7: CopyLoc[0](self#0#0: &mut Validator)
	8: ImmBorrowField[4](Validator.pending_withdraw: u64)
	9: ReadRef
	10: Sub
	11: CopyLoc[0](self#0#0: &mut Validator)
	12: MutBorrowField[5](Validator.stake_amount: u64)
	13: WriteRef
	14: LdU64(0)
	15: CopyLoc[0](self#0#0: &mut Validator)
	16: MutBorrowField[0](Validator.pending_stake: u64)
	17: WriteRef
	18: LdU64(0)
	19: CopyLoc[0](self#0#0: &mut Validator)
	20: MutBorrowField[4](Validator.pending_withdraw: u64)
	21: WriteRef
	22: CopyLoc[0](self#0#0: &mut Validator)
	23: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	24: ImmBorrowField[6](ValidatorMetadata.next_epoch_gas_price: u64)
	25: ReadRef
	26: CopyLoc[0](self#0#0: &mut Validator)
	27: MutBorrowField[7](Validator.gas_price: u64)
	28: WriteRef
	29: CopyLoc[0](self#0#0: &mut Validator)
	30: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	31: ImmBorrowField[8](ValidatorMetadata.next_epoch_commission_rate: u64)
	32: ReadRef
	33: CopyLoc[0](self#0#0: &mut Validator)
	34: MutBorrowField[9](Validator.commission_rate: u64)
	35: WriteRef
	36: CopyLoc[0](self#0#0: &mut Validator)
	37: ImmBorrowField[5](Validator.stake_amount: u64)
	38: ReadRef
	39: MoveLoc[0](self#0#0: &mut Validator)
	40: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	41: ImmBorrowField[2](ValidatorMetadata.next_epoch_stake: u64)
	42: ReadRef
	43: Eq
	44: BrFalse(46)
B1:
	45: Branch(48)
B2:
	46: LdU64(0)
	47: Abort
B3:
	48: Ret
}
public(friend) request_add_delegation(self#0#0: &mut Validator, delegated_stake#0#0: Balance<SUI>, locking_period#0#0: Option<EpochTimeLock>, delegator#0#0: address, ctx#0#0: &mut TxContext) {
B0:
	0: ImmBorrowLoc[1](delegated_stake#0#0: Balance<SUI>)
	1: Call balance::value<SUI>(&Balance<SUI>): u64
	2: StLoc[5](delegate_amount#1#0: u64)
	3: CopyLoc[5](delegate_amount#1#0: u64)
	4: LdU64(0)
	5: Gt
	6: BrFalse(8)
B1:
	7: Branch(14)
B2:
	8: MoveLoc[0](self#0#0: &mut Validator)
	9: Pop
	10: MoveLoc[4](ctx#0#0: &mut TxContext)
	11: Pop
	12: LdU64(0)
	13: Abort
B3:
	14: CopyLoc[0](self#0#0: &mut Validator)
	15: MutBorrowField[10](Validator.delegation_staking_pool: StakingPool)
	16: MoveLoc[1](delegated_stake#0#0: Balance<SUI>)
	17: MoveLoc[2](locking_period#0#0: Option<EpochTimeLock>)
	18: MoveLoc[3](delegator#0#0: address)
	19: MoveLoc[4](ctx#0#0: &mut TxContext)
	20: Call staking_pool::request_add_delegation(&mut StakingPool, Balance<SUI>, Option<EpochTimeLock>, address, &mut TxContext)
	21: CopyLoc[0](self#0#0: &mut Validator)
	22: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	23: ImmBorrowField[11](ValidatorMetadata.next_epoch_delegation: u64)
	24: ReadRef
	25: MoveLoc[5](delegate_amount#1#0: u64)
	26: Add
	27: MoveLoc[0](self#0#0: &mut Validator)
	28: MutBorrowField[1](Validator.metadata: ValidatorMetadata)
	29: MutBorrowField[11](ValidatorMetadata.next_epoch_delegation: u64)
	30: WriteRef
	31: Ret
}
public(friend) request_withdraw_delegation(self#0#0: &mut Validator, delegation#0#0: Delegation, staked_sui#0#0: StakedSui, ctx#0#0: &mut TxContext) {
B0:
	0: CopyLoc[0](self#0#0: &mut Validator)
	1: MutBorrowField[10](Validator.delegation_staking_pool: StakingPool)
	2: MoveLoc[1](delegation#0#0: Delegation)
	3: MoveLoc[2](staked_sui#0#0: StakedSui)
	4: MoveLoc[3](ctx#0#0: &mut TxContext)
	5: Call staking_pool::request_withdraw_delegation(&mut StakingPool, Delegation, StakedSui, &mut TxContext): u64
	6: StLoc[4](principal_withdraw_amount#1#0: u64)
	7: MoveLoc[0](self#0#0: &mut Validator)
	8: MoveLoc[4](principal_withdraw_amount#1#0: u64)
	9: Call decrease_next_epoch_delegation(&mut Validator, u64)
	10: Ret
}
public(friend) cancel_delegation_request(self#0#0: &mut Validator, staked_sui#0#0: StakedSui, ctx#0#0: &mut TxContext) {
B0:
	0: ImmBorrowLoc[1](staked_sui#0#0: StakedSui)
	1: Call staking_pool::staked_sui_amount(&StakedSui): u64
	2: StLoc[3](delegate_amount#1#0: u64)
	3: CopyLoc[0](self#0#0: &mut Validator)
	4: MutBorrowField[10](Validator.delegation_staking_pool: StakingPool)
	5: MoveLoc[1](staked_sui#0#0: StakedSui)
	6: MoveLoc[2](ctx#0#0: &mut TxContext)
	7: Call staking_pool::cancel_delegation_request(&mut StakingPool, StakedSui, &mut TxContext)
	8: CopyLoc[0](self#0#0: &mut Validator)
	9: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	10: ImmBorrowField[11](ValidatorMetadata.next_epoch_delegation: u64)
	11: ReadRef
	12: MoveLoc[3](delegate_amount#1#0: u64)
	13: Sub
	14: MoveLoc[0](self#0#0: &mut Validator)
	15: MutBorrowField[1](Validator.metadata: ValidatorMetadata)
	16: MutBorrowField[11](ValidatorMetadata.next_epoch_delegation: u64)
	17: WriteRef
	18: Ret
}
public(friend) decrease_next_epoch_delegation(self#0#0: &mut Validator, amount#0#0: u64) {
B0:
	0: CopyLoc[0](self#0#0: &mut Validator)
	1: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	2: ImmBorrowField[11](ValidatorMetadata.next_epoch_delegation: u64)
	3: ReadRef
	4: MoveLoc[1](amount#0#0: u64)
	5: Sub
	6: MoveLoc[0](self#0#0: &mut Validator)
	7: MutBorrowField[1](Validator.metadata: ValidatorMetadata)
	8: MutBorrowField[11](ValidatorMetadata.next_epoch_delegation: u64)
	9: WriteRef
	10: Ret
}
public(friend) request_set_gas_price(self#0#0: &mut Validator, new_price#0#0: u64) {
B0:
	0: MoveLoc[1](new_price#0#0: u64)
	1: MoveLoc[0](self#0#0: &mut Validator)
	2: MutBorrowField[1](Validator.metadata: ValidatorMetadata)
	3: MutBorrowField[6](ValidatorMetadata.next_epoch_gas_price: u64)
	4: WriteRef
	5: Ret
}
public(friend) request_set_commission_rate(self#0#0: &mut Validator, new_commission_rate#0#0: u64) {
B0:
	0: MoveLoc[1](new_commission_rate#0#0: u64)
	1: MoveLoc[0](self#0#0: &mut Validator)
	2: MutBorrowField[1](Validator.metadata: ValidatorMetadata)
	3: MutBorrowField[8](ValidatorMetadata.next_epoch_commission_rate: u64)
	4: WriteRef
	5: Ret
}
public(friend) deposit_delegation_rewards(self#0#0: &mut Validator, reward#0#0: Balance<SUI>) {
B0:
	0: CopyLoc[0](self#0#0: &mut Validator)
	1: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	2: ImmBorrowField[11](ValidatorMetadata.next_epoch_delegation: u64)
	3: ReadRef
	4: ImmBorrowLoc[1](reward#0#0: Balance<SUI>)
	5: Call balance::value<SUI>(&Balance<SUI>): u64
	6: Add
	7: CopyLoc[0](self#0#0: &mut Validator)
	8: MutBorrowField[1](Validator.metadata: ValidatorMetadata)
	9: MutBorrowField[11](ValidatorMetadata.next_epoch_delegation: u64)
	10: WriteRef
	11: MoveLoc[0](self#0#0: &mut Validator)
	12: MutBorrowField[10](Validator.delegation_staking_pool: StakingPool)
	13: MoveLoc[1](reward#0#0: Balance<SUI>)
	14: Call staking_pool::deposit_rewards(&mut StakingPool, Balance<SUI>)
	15: Ret
}
public(friend) process_pending_delegations_and_withdraws(self#0#0: &mut Validator, ctx#0#0: &mut TxContext) {
B0:
	0: CopyLoc[0](self#0#0: &mut Validator)
	1: MutBorrowField[10](Validator.delegation_staking_pool: StakingPool)
	2: CopyLoc[1](ctx#0#0: &mut TxContext)
	3: Call staking_pool::process_pending_delegation_withdraws(&mut StakingPool, &mut TxContext): u64
	4: StLoc[2](reward_withdraw_amount#1#0: u64)
	5: CopyLoc[0](self#0#0: &mut Validator)
	6: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	7: ImmBorrowField[11](ValidatorMetadata.next_epoch_delegation: u64)
	8: ReadRef
	9: MoveLoc[2](reward_withdraw_amount#1#0: u64)
	10: Sub
	11: CopyLoc[0](self#0#0: &mut Validator)
	12: MutBorrowField[1](Validator.metadata: ValidatorMetadata)
	13: MutBorrowField[11](ValidatorMetadata.next_epoch_delegation: u64)
	14: WriteRef
	15: MoveLoc[0](self#0#0: &mut Validator)
	16: MutBorrowField[10](Validator.delegation_staking_pool: StakingPool)
	17: MoveLoc[1](ctx#0#0: &mut TxContext)
	18: Call staking_pool::process_pending_delegations(&mut StakingPool, &mut TxContext)
	19: Ret
}
public(friend) get_staking_pool_mut_ref(self#0#0: &mut Validator): &mut StakingPool {
B0:
	0: MoveLoc[0](self#0#0: &mut Validator)
	1: MutBorrowField[10](Validator.delegation_staking_pool: StakingPool)
	2: Ret
}
public metadata(self#0#0: &Validator): &ValidatorMetadata {
B0:
	0: MoveLoc[0](self#0#0: &Validator)
	1: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	2: Ret
}
public sui_address(self#0#0: &Validator): address {
B0:
	0: MoveLoc[0](self#0#0: &Validator)
	1: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	2: ImmBorrowField[3](ValidatorMetadata.sui_address: address)
	3: ReadRef
	4: Ret
}
public total_stake_amount(self#0#0: &Validator): u64 {
B0:
	0: Nop
	1: CopyLoc[0](self#0#0: &Validator)
	2: ImmBorrowField[5](Validator.stake_amount: u64)
	3: ReadRef
	4: MoveLoc[0](self#0#0: &Validator)
	5: ImmBorrowField[10](Validator.delegation_staking_pool: StakingPool)
	6: Call staking_pool::sui_balance(&StakingPool): u64
	7: Add
	8: Ret
}
public stake_amount(self#0#0: &Validator): u64 {
B0:
	0: MoveLoc[0](self#0#0: &Validator)
	1: ImmBorrowField[5](Validator.stake_amount: u64)
	2: ReadRef
	3: Ret
}
public delegate_amount(self#0#0: &Validator): u64 {
B0:
	0: MoveLoc[0](self#0#0: &Validator)
	1: ImmBorrowField[10](Validator.delegation_staking_pool: StakingPool)
	2: Call staking_pool::sui_balance(&StakingPool): u64
	3: Ret
}
public total_stake(self#0#0: &Validator): u64 {
B0:
	0: CopyLoc[0](self#0#0: &Validator)
	1: Call stake_amount(&Validator): u64
	2: MoveLoc[0](self#0#0: &Validator)
	3: Call delegate_amount(&Validator): u64
	4: Add
	5: Ret
}
public voting_power(self#0#0: &Validator): u64 {
B0:
	0: MoveLoc[0](self#0#0: &Validator)
	1: ImmBorrowField[12](Validator.voting_power: u64)
	2: ReadRef
	3: Ret
}
public(friend) set_voting_power(self#0#0: &mut Validator, new_voting_power#0#0: u64) {
B0:
	0: MoveLoc[1](new_voting_power#0#0: u64)
	1: MoveLoc[0](self#0#0: &mut Validator)
	2: MutBorrowField[12](Validator.voting_power: u64)
	3: WriteRef
	4: Ret
}
public pending_stake_amount(self#0#0: &Validator): u64 {
B0:
	0: MoveLoc[0](self#0#0: &Validator)
	1: ImmBorrowField[0](Validator.pending_stake: u64)
	2: ReadRef
	3: Ret
}
public pending_withdraw(self#0#0: &Validator): u64 {
B0:
	0: MoveLoc[0](self#0#0: &Validator)
	1: ImmBorrowField[4](Validator.pending_withdraw: u64)
	2: ReadRef
	3: Ret
}
public gas_price(self#0#0: &Validator): u64 {
B0:
	0: MoveLoc[0](self#0#0: &Validator)
	1: ImmBorrowField[7](Validator.gas_price: u64)
	2: ReadRef
	3: Ret
}
public commission_rate(self#0#0: &Validator): u64 {
B0:
	0: MoveLoc[0](self#0#0: &Validator)
	1: ImmBorrowField[9](Validator.commission_rate: u64)
	2: ReadRef
	3: Ret
}
public pool_token_exchange_rate(self#0#0: &Validator): PoolTokenExchangeRate {
B0:
	0: MoveLoc[0](self#0#0: &Validator)
	1: ImmBorrowField[10](Validator.delegation_staking_pool: StakingPool)
	2: Call staking_pool::pool_token_exchange_rate(&StakingPool): PoolTokenExchangeRate
	3: Ret
}
public is_duplicate(self#0#0: &Validator, other#0#0: &Validator): bool {
L0:	%#3: bool
B0:
	0: CopyLoc[0](self#0#0: &Validator)
	1: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	2: ImmBorrowField[3](ValidatorMetadata.sui_address: address)
	3: ReadRef
	4: CopyLoc[1](other#0#0: &Validator)
	5: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	6: ImmBorrowField[3](ValidatorMetadata.sui_address: address)
	7: ReadRef
	8: Eq
	9: BrFalse(13)
B1:
	10: LdTrue
	11: StLoc[2](%#1: bool)
	12: Branch(23)
B2:
	13: CopyLoc[0](self#0#0: &Validator)
	14: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	15: ImmBorrowField[13](ValidatorMetadata.name: String)
	16: ReadRef
	17: CopyLoc[1](other#0#0: &Validator)
	18: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	19: ImmBorrowField[13](ValidatorMetadata.name: String)
	20: ReadRef
	21: Eq
	22: StLoc[2](%#1: bool)
B3:
	23: MoveLoc[2](%#1: bool)
	24: BrFalse(28)
B4:
	25: LdTrue
	26: StLoc[3](%#2: bool)
	27: Branch(38)
B5:
	28: CopyLoc[0](self#0#0: &Validator)
	29: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	30: ImmBorrowField[14](ValidatorMetadata.net_address: vector<u8>)
	31: ReadRef
	32: CopyLoc[1](other#0#0: &Validator)
	33: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	34: ImmBorrowField[14](ValidatorMetadata.net_address: vector<u8>)
	35: ReadRef
	36: Eq
	37: StLoc[3](%#2: bool)
B6:
	38: MoveLoc[3](%#2: bool)
	39: BrFalse(47)
B7:
	40: MoveLoc[0](self#0#0: &Validator)
	41: Pop
	42: MoveLoc[1](other#0#0: &Validator)
	43: Pop
	44: LdTrue
	45: StLoc[4](%#3: bool)
	46: Branch(57)
B8:
	47: MoveLoc[0](self#0#0: &Validator)
	48: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	49: ImmBorrowField[15](ValidatorMetadata.pubkey_bytes: vector<u8>)
	50: ReadRef
	51: MoveLoc[1](other#0#0: &Validator)
	52: ImmBorrowField[1](Validator.metadata: ValidatorMetadata)
	53: ImmBorrowField[15](ValidatorMetadata.pubkey_bytes: vector<u8>)
	54: ReadRef
	55: Eq
	56: StLoc[4](%#3: bool)
B9:
	57: MoveLoc[4](%#3: bool)
	58: Ret
}
}
